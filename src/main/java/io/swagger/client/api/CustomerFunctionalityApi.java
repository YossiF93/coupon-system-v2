/*
 * YossiF93 - Coupons System (Server Side)
 * CRUD APIs for mangaging the Coupon System .
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CouponType;
import io.swagger.client.model.CouponsList;
import io.swagger.client.model.CustomerDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerFunctionalityApi {
    private ApiClient apiClient;

    public CustomerFunctionalityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerFunctionalityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAvailableCoupons
     * @param customerId Id of the customer (required)
     * @param couponType The Coupon type (optional)
     * @param price price of the coupon (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailableCouponsCall(Integer customerId, CouponsList couponType, Integer price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupons-system/customer/getAvailableCoupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
        if (couponType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("couponType", couponType));
        if (price != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("price", price));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailableCouponsValidateBeforeCall(Integer customerId, CouponsList couponType, Integer price, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAvailableCoupons(Async)");
        }
        
        com.squareup.okhttp.Call call = getAvailableCouponsCall(customerId, couponType, price, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get the available coupons for the client in the coupon system.
     * 
     * @param customerId Id of the customer (required)
     * @param couponType The Coupon type (optional)
     * @param price price of the coupon (optional)
     * @return CouponType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponType getAvailableCoupons(Integer customerId, CouponsList couponType, Integer price) throws ApiException {
        ApiResponse<CouponType> resp = getAvailableCouponsWithHttpInfo(customerId, couponType, price);
        return resp.getData();
    }

    /**
     * get the available coupons for the client in the coupon system.
     * 
     * @param customerId Id of the customer (required)
     * @param couponType The Coupon type (optional)
     * @param price price of the coupon (optional)
     * @return ApiResponse&lt;CouponType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponType> getAvailableCouponsWithHttpInfo(Integer customerId, CouponsList couponType, Integer price) throws ApiException {
        com.squareup.okhttp.Call call = getAvailableCouponsValidateBeforeCall(customerId, couponType, price, null, null);
        Type localVarReturnType = new TypeToken<CouponType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the available coupons for the client in the coupon system. (asynchronously)
     * 
     * @param customerId Id of the customer (required)
     * @param couponType The Coupon type (optional)
     * @param price price of the coupon (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailableCouponsAsync(Integer customerId, CouponsList couponType, Integer price, final ApiCallback<CouponType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailableCouponsValidateBeforeCall(customerId, couponType, price, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerCoupons
     * @param customerId Id of the customer (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerCouponsCall(Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupons-system/admin/getCustomerCoupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerCouponsValidateBeforeCall(Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCustomerCouponsCall(customerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get the Coupons registered in the coupon system by customerId.
     * 
     * @param customerId Id of the customer (optional)
     * @return CouponsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponsList getCustomerCoupons(Integer customerId) throws ApiException {
        ApiResponse<CouponsList> resp = getCustomerCouponsWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * get the Coupons registered in the coupon system by customerId.
     * 
     * @param customerId Id of the customer (optional)
     * @return ApiResponse&lt;CouponsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponsList> getCustomerCouponsWithHttpInfo(Integer customerId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerCouponsValidateBeforeCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<CouponsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the Coupons registered in the coupon system by customerId. (asynchronously)
     * 
     * @param customerId Id of the customer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerCouponsAsync(Integer customerId, final ApiCallback<CouponsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerCouponsValidateBeforeCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerDetails
     * @param customerId Id of the coupon (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerDetailsCall(Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/coupons-system/customer/getCustomer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerDetailsValidateBeforeCall(Integer customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomerDetailsCall(customerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get a Customer details from the coupon system.
     * 
     * @param customerId Id of the coupon (required)
     * @return CustomerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDetails getCustomerDetails(Integer customerId) throws ApiException {
        ApiResponse<CustomerDetails> resp = getCustomerDetailsWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * get a Customer details from the coupon system.
     * 
     * @param customerId Id of the coupon (required)
     * @return ApiResponse&lt;CustomerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDetails> getCustomerDetailsWithHttpInfo(Integer customerId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerDetailsValidateBeforeCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get a Customer details from the coupon system. (asynchronously)
     * 
     * @param customerId Id of the coupon (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerDetailsAsync(Integer customerId, final ApiCallback<CustomerDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerDetailsValidateBeforeCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
